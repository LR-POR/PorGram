; TODO 01.11.21: present tense in infintive forms?

;infl-inf-lex-rule := infl-lex-rule & tmp-lex-rule-super &
;  [ SYNSEM.LOCAL [ CAT.HEAD.FORM infl_infinitive,
;                   CONT.HOOK.INDEX.E.TENSE present ] ].


; additional form features
; allowing for verbs that are compatible with both the inflected and the non-inflected infinitive
; as well as verbs governing any non-past non-finite form

nonpast-nonfinite := nonfinite.
infl-or-not-infinitive := nonpast-nonfinite.

infinitive := infl-or-not-infinitive.
; TODO 28.10.21: infl-infinitive or infl-inf
infl_infinitive := infl-or-not-infinitive.
;pres-part-or-infl-inf := nonfinite.
;  TODO 28.10.21: pres-part
present_participle := nonpast-nonfinite.

; form features for manually encoded complementizers

a_que := form.


; additional cases

rec := case. ; recipient
dat := rec. ; dative
goa := rec. ; goal
gen := case. ; genitive
obl := case. ; oblique
ine := case. ; inessive ("em")
sup := case. ; superessive ("sobre")
com := case. ; commitative ("com")
per := case. ; perlative ("por")

; disjunctive type for prepositions and nouns (Drellishak 2009)

+np :+ [ CASE case ].

; The following types were manually created, they are not encoded in the choices file.


; oblique (prepositional) forms of personal pronouns
; o cachorro obedece a mim
prep-pers-pron-noun-lex := pers-pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE obl].

prep-pers-pron-1s-noun-lex := pers-pron-1-noun-lex & pers-pron-sg-noun-lex & prep-pers-pron-noun-lex.

prep-pers-pron-2s-noun-lex := pers-pron-2-noun-lex & pers-pron-sg-noun-lex & prep-pers-pron-noun-lex.

; TODO 06.10.21: replace COMP-FORM by FORM 
; Assigning COMP-FORM (complementizer form) to complementizers to handle complementizer selection by verbs subcategorizing for an infinitival complement:
comp :+ [ 
    COMP-FORM comp-form ].
comp-form := *top*.
a_comp := comp-form.
de_comp := que+de_comp.
que_comp := que+de_comp.
que+de_comp := comp-form.
em_comp := comp-form.
para_comp := comp-form.

; Lexical rule types for handling the conjugation of copulative verbs:
cop-pres-subj-2sg-lex-rule := cop-2sg-lex-rule & cop-pres-subj-lex-rule.

cop-pres-subj-3sg-lex-rule := cop-3sg-lex-rule & cop-pres-subj-lex-rule.

cop-pres-subj-1pl-lex-rule := cop-1pl-lex-rule & cop-pres-subj-lex-rule.

cop-pres-subj-3pl-lex-rule := cop-3pl-lex-rule & cop-pres-subj-lex-rule.

cop-pres-subj-2pl-lex-rule := cop-2pl-lex-rule & cop-pres-subj-lex-rule.

cop-pres-subj-3pl-lex-rule := cop-3pl-lex-rule & cop-pres-subj-lex-rule.

cop-imperf-ind-2sg-lex-rule := cop-2sg-lex-rule & cop-imperf-lex-rule.

cop-imperf-ind-3sg-lex-rule := cop-3sg-lex-rule & cop-imperf-lex-rule.

cop-imperf-ind-1pl-lex-rule := cop-1pl-lex-rule & cop-imperf-lex-rule.

cop-imperf-ind-2pl-lex-rule := cop-2pl-lex-rule & cop-imperf-lex-rule.

cop-imperf-ind-3pl-lex-rule := cop-3pl-lex-rule & cop-imperf-lex-rule.

cop-imperf-subj-2sg-lex-rule := cop-2sg-lex-rule & cop-imperf-subj-lex-rule.

cop-imperf-subj-3sg-lex-rule := cop-3sg-lex-rule & cop-imperf-subj-lex-rule.

cop-imperf-subj-1pl-lex-rule := cop-1pl-lex-rule & cop-imperf-subj-lex-rule.

cop-imperf-subj-2pl-lex-rule := cop-2pl-lex-rule & cop-imperf-subj-lex-rule.

cop-imperf-subj-3pl-lex-rule := cop-3pl-lex-rule & cop-imperf-subj-lex-rule.

cop-perf-2sg-lex-rule := cop-2sg-lex-rule & cop-perf-lex-rule.

cop-perf-3sg-lex-rule := cop-3sg-lex-rule & cop-perf-lex-rule.

cop-perf-1pl-lex-rule := cop-1pl-lex-rule & cop-perf-lex-rule.

cop-perf-2pl-lex-rule := cop-2pl-lex-rule & cop-perf-lex-rule.

cop-perf-3pl-lex-rule := cop-3pl-lex-rule & cop-perf-lex-rule.

cop-fut-ind-2sg-lex-rule := cop-2sg-lex-rule & cop-fut-ind-lex-rule.

cop-fut-ind-3sg-lex-rule := cop-3sg-lex-rule & cop-fut-ind-lex-rule.

cop-fut-ind-1pl-lex-rule := cop-1pl-lex-rule & cop-fut-ind-lex-rule.

cop-fut-ind-2pl-lex-rule := cop-2pl-lex-rule & cop-fut-ind-lex-rule.

cop-fut-ind-3pl-lex-rule := cop-3pl-lex-rule & cop-fut-ind-lex-rule.

cop-fut-subj-2sg-lex-rule := cop-2sg-lex-rule & cop-fut-subj-lex-rule.

cop-fut-subj-3sg-lex-rule := cop-3sg-lex-rule & cop-fut-subj-lex-rule.

cop-fut-subj-1pl-lex-rule := cop-1pl-lex-rule & cop-fut-subj-lex-rule.

cop-fut-subj-2pl-lex-rule := cop-2pl-lex-rule & cop-fut-subj-lex-rule.

cop-fut-subj-3pl-lex-rule := cop-3pl-lex-rule & cop-fut-subj-lex-rule.

cop-pqp-2sg-lex-rule := cop-2sg-lex-rule & cop-pqp-lex-rule.

cop-pqp-3sg-lex-rule := cop-3sg-lex-rule & cop-pqp-lex-rule.

cop-pqp-1pl-lex-rule := cop-1pl-lex-rule & cop-pqp-lex-rule.

cop-pqp-2pl-lex-rule := cop-2pl-lex-rule & cop-pqp-lex-rule.

cop-pqp-3pl-lex-rule := cop-3pl-lex-rule & cop-pqp-lex-rule.

cop-fut-pret-2sg-lex-rule := cop-2sg-lex-rule & cop-fut-pret-lex-rule.

cop-fut-pret-3sg-lex-rule := cop-3sg-lex-rule & cop-fut-pret-lex-rule.

cop-fut-pret-1pl-lex-rule := cop-1pl-lex-rule & cop-fut-pret-lex-rule.

cop-fut-pret-2pl-lex-rule := cop-2pl-lex-rule & cop-fut-pret-lex-rule.

cop-fut-pret-3pl-lex-rule := cop-3pl-lex-rule & cop-fut-pret-lex-rule.

cop-infl-inf-1sg-lex-rule := cop-1sg-lex-rule & cop-infl-inf-lex-rule.

cop-infl-inf-3sg-lex-rule := cop-3sg-lex-rule & cop-infl-inf-lex-rule.

cop-infl-inf-1pl-lex-rule := cop-1pl-lex-rule & cop-infl-inf-lex-rule.

cop-infl-inf-2pl-lex-rule := cop-2pl-lex-rule & cop-infl-inf-lex-rule.

cop-infl-inf-3pl-lex-rule := cop-3pl-lex-rule & cop-infl-inf-lex-rule.


; These types definitions overwrite the definitions in the choices file.
; alternative notation
;subj-cl-verb-lex := fin-cl-verb-lex &  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX.E.MOOD subjunctive  ] >].

;ind-cl-verb-lex := que-cl-verb-lex & [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX.E.MOOD indicative  ] >].

ind-cl-verb-lex := que-cl-verb-lex & [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.E.MOOD indicative].

subj-cl-verb-lex := fin-cl-verb-lex & [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.E.MOOD subjunctive].


; Types for encoding the full forms of determiners not handled in the morphology:  
non-infl-form-determiner-lex :=  det-num-rule-dtr &
  [ SYNSEM.L-QUE -,
    INFLECTED [ DET-GEND-FLAG -,
                DET-NUM-FLAG - ] ].

def-art-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] ].

todo-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] ].

indef-art-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] ].

algum-determiner-lex :=  non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

dem-prox-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] ].

dem-med-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] ].

dem-dist-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] ].

outro-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] ].

pouco-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] ].

qualquer-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

certo-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

muito-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

tal-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

nenhum-determiner-lex := non-infl-form-determiner-lex & determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] ].

; pl-det-lex := [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural].
; sg-det-lex := [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular].
; pers3-det-lex := [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd].
; masc-det-lex := [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND masculine].
; fem-det-lex := [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND feminine].

det-lex := determiner-lex & no-icons-lex-item & [ SYNSEM [ L-QUE -] ].

3pl-det-lex := det-lex & [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [PER 3rd, NUM plural]].

qu-det-lex := wh-determiner-lex & one-icons-lex-item & [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd].

qu-sg-det-lex := qu-det-lex & [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular].

qu-pl-det-lex := qu-det-lex & [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural].

qu-msg-det-lex := qu-sg-det-lex & [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND masculine].

qu-fsg-det-lex := qu-sg-det-lex & [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND feminine].

qu-mpl-det-lex := qu-pl-det-lex &  [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND masculine].

qu-fpl-det-lex := qu-pl-det-lex & [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND feminine].

3mpl-det-lex := 3pl-det-lex & [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND masculine].

3fpl-det-lex := 3pl-det-lex & [SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND feminine].

; card-det-lex := 3pl-det-lex.

; ambos-det-lex :=  3pl-det-lex.

; varios-det-lex :=  3pl-det-lex.

; diversos-det-lex :=  3pl-det-lex.


; Verb valency types:

; main verb type variant for object control verbs
; TODO 07.10.21: not used anymore

main-verb-lex-2 := verb-lex & basic-verb-lex & basic-non-wh-word-lex &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 COMPS.FIRST #obj ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.REST.FIRST #obj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD +np ] ] > ].

ditransitive-verb-lex := main-verb-lex & noninh-refl-verb-lex & ditransitive-lex-item & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comp1, #comp2 >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comp1 &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD +np ] ],
	      #comp2 &
	      [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD +np ] ]	   
			   > ].

; ele doou a bicicleta a o artista
; ele doou a bicicleta para o artista
nom-acc-adp-ditransitive-verb-lex := ditransitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
	     [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ],
             [ LOCAL.CAT.HEAD adp ] > ].

nom-gen-adp-ditransitive-verb-lex := ditransitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
	     [ LOCAL.CAT.HEAD adp &
                              [ CASE gen ] ],
             [ LOCAL.CAT.HEAD adp ] > ].

nom-acc-dat-ditransitive-verb-lex := nom-acc-adp-ditransitive-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.CASE dat ].

nom-acc-goa-ditransitive-verb-lex := nom-acc-adp-ditransitive-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.CASE goa ].

nom-acc-rec-ditransitive-verb-lex := nom-acc-adp-ditransitive-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.CASE rec ].

nom-acc-com-ditransitive-verb-lex  := nom-acc-adp-ditransitive-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.CASE com ].

nom-acc-gen-ditransitive-verb-lex  := nom-acc-adp-ditransitive-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.CASE gen ].

nom-acc-ine-ditransitive-verb-lex  := nom-acc-adp-ditransitive-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.CASE ine ].

nom-acc-per-ditransitive-verb-lex  := nom-acc-adp-ditransitive-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.CASE per ].

nom-acc-sup-ditransitive-verb-lex  := nom-acc-adp-ditransitive-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.CASE sup ].

nom-gen-goa-ditransitive-verb-lex  := nom-gen-adp-ditransitive-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.CASE goa ].


; a estudante forçou o artista a matar a ratazana
; embedded verb is a CP complement
; TODO: 21.11.2021 Why not use ditrans-second-arg-control-lex-item from matrix.tdl?
; Because clause is headed by a C (main verb does not govern a  VP, but a S)
; see clausal-third-arg-ditrans-lex-item 
cl-3rd-arg-ditrans-2nd-arg-control-lex-item := non-local-none-lex-item & one-icons-lex-item &
   [ ARG-ST < [ LOCAL [ CAT cat-sat,
                        CONT.HOOK [ INDEX ref-ind & #ind1,
                                    ICONS-KEY.IARG1 #clause ] ] ],
              [ LOCAL [ CAT cat-sat,
                        CONT.HOOK [ INDEX ref-ind & #ind2,
                                    ICONS-KEY.IARG1 #clause ] ] ],
              [ LOCAL.CONT.HOOK [ XARG #ind2,
				  LTOP #larg,
                                  INDEX #target ] ] >,
     SYNSEM [ LOCAL.CONT [ HOOK.CLAUSE-KEY #clause,
                           HCONS.LIST < qeq & [ HARG #harg,
                                            LARG #larg ] >,
                           ICONS.LIST < [ IARG1 #clause, IARG2 #target ] > ],
               LKEYS.KEYREL [ ARG1 #ind1,
                              ARG2 #ind2,
                              ARG3 #harg ] ] ].

clausal-ditrans-verb-lex := main-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comp1,#comp2 >,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
     #comp1 &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD +np ] ],
             #comp2 &
            [ LOCAL.CAT [ MC na-or--,
                           VAL [ SPR < >,
                                 COMPS < >,
                                 SUBJ < > ] ] ]  > ].


clausal-nom-rec-verb-lex := clausal-ditrans-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun & [ CASE nom ],
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD adp & [ CASE rec ] ].

;TODO: 27.10.21 create common supertype for the following two types

ind-cl-rec-verb-lex := fin-cl-verb-lex & clausal-nom-rec-verb-lex & clausal-third-arg-ditrans-lex-item  &
  [ SYNSEM [ LOCAL.CAT.VAL.COMPS.REST.FIRST [ LOCAL [ CAT [ HEAD comp &
                                                        [ FORM que ],
                                                   WH.BOOL - ],
                                             CONT.HOOK.INDEX [ E.MOOD indicative,
                                                               SF prop ] ] ] ,
             NON-LOCAL.QUE.LIST < > ] ].

quest-cl-rec-verb-lex := fin-cl-verb-lex & clausal-nom-rec-verb-lex & clausal-third-arg-ditrans-lex-item  &
  [ SYNSEM [ LOCAL.CAT.VAL.COMPS.REST.FIRST [ LOCAL [ CONT.HOOK.INDEX [ E.MOOD indicative,
                                                             SF ques ],
                                           CAT [ HEAD +vc &
                                                      [ FORM finite ],
                                                 WH.BOOL + ] ] ] ,
             NON-LOCAL.QUE.LIST < > ] ].

; TODO 21.12.21: create common supertype for the following two types:
; subj-cl-rec-verb-lex (supertype)
; que-subj-cl-rec-verb-lex
; eu exigi aos alunos que eles fizessem um trabalho
; para-que-subj-cl-rec-verb-lex
; eu pedi aos alunos para que eles fizessem um trabalho
subj-cl-rec-verb-lex := fin-cl-verb-lex & clausal-nom-rec-verb-lex & clausal-third-arg-ditrans-lex-item  &
  [ SYNSEM [ LOCAL.CAT.VAL.COMPS.REST.FIRST [ LOCAL [ CAT [ HEAD comp &
                                                        [ FORM que ],
                                                   WH.BOOL - ],
                                             CONT.HOOK.INDEX [ E.MOOD subjunctive,
                                                               SF prop ] ] ] ,
             NON-LOCAL.QUE.LIST < > ] ].


para-que-subj-cl-rec-verb-lex := fin-cl-verb-lex & clausal-nom-rec-verb-lex & clausal-third-arg-ditrans-lex-item  &
  [ SYNSEM [ LOCAL.CAT.VAL.COMPS.REST.FIRST [ LOCAL [ CAT [ HEAD comp &
                                                        [ FORM para_que ],
                                                   WH.BOOL - ],
                                             CONT.HOOK.INDEX [ E.MOOD subjunctive,
                                                               SF prop ] ] ] ,
             NON-LOCAL.QUE.LIST < > ] ].

prep-obj-verb-lex := transitive-verb-lex &
		    [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD adp ].

dat-obj-verb-lex := prep-obj-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE dat ].

gen-obj-verb-lex := prep-obj-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE gen ].

nonrefl-gen-obj-verb-lex := noninh-refl-verb-lex & gen-obj-verb-lex.

refl-gen-obj-verb-lex := inh-refl-verb-lex & gen-obj-verb-lex.

nonrefl-dat-obj-verb-lex := noninh-refl-verb-lex & dat-obj-verb-lex.

refl-dat-obj-verb-lex := inh-refl-verb-lex & dat-obj-verb-lex.

goa-obj-verb-lex := prep-obj-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE goa ].

ine-obj-verb-lex := prep-obj-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE ine ].

sup-obj-verb-lex := prep-obj-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE sup ].

com-obj-verb-lex := prep-obj-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE com ].

per-obj-verb-lex := prep-obj-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE per ].

refl-goa-obj-verb-lex := inh-refl-verb-lex & goa-obj-verb-lex.

refl-ine-obj-verb-lex := inh-refl-verb-lex & ine-obj-verb-lex.

refl-sup-obj-verb-lex := inh-refl-verb-lex & sup-obj-verb-lex. 

refl-per-obj-verb-lex := inh-refl-verb-lex & per-obj-verb-lex.

refl-com-obj-verb-lex := inh-refl-verb-lex & com-obj-verb-lex.

nonrefl-ine-obj-verb-lex := noninh-refl-verb-lex & ine-obj-verb-lex.

nonrefl-sup-obj-verb-lex := noninh-refl-verb-lex & sup-obj-verb-lex.

nonrefl-per-obj-verb-lex := noninh-refl-verb-lex & per-obj-verb-lex.

nonrefl-com-obj-verb-lex := noninh-refl-verb-lex & com-obj-verb-lex.

nonrefl-goa-obj-verb-lex := noninh-refl-verb-lex & goa-obj-verb-lex.

case-marking-adp-lex := non-local-none-lex-item & raise-sem-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD adp &
                            [ CASE case,
                              MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps >,
                             SPEC < > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL.SPR < >,
                           HEAD noun &
                                [ CASE case ] ] ] > ].

obl-case-marking-adp-lex := case-marking-adp-lex & [ ARG-ST.FIRST.LOCAL.CAT.HEAD.CASE obl ].

; auxiliaries (subject raising verbs) subcategorizing for an infinitival complement headed by a complementizer

compl-subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE nom ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT.HEAD comp ] > ].

compl-subj-raise-aux-with-pred := compl-subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1 & [ ARG-ST.REST.FIRST.LOCAL.CAT.HEAD.FORM infinitive].


; o cachorro começou a latir
a-compl-subj-raise-aux-with-pred := compl-subj-raise-aux-with-pred & [ ARG-ST.REST.FIRST.LOCAL.CAT.HEAD.COMP-FORM a_comp ].

; o cachorro parou de latir
de-compl-subj-raise-aux-with-pred := compl-subj-raise-aux-with-pred & [ ARG-ST.REST.FIRST.LOCAL.CAT.HEAD.COMP-FORM de_comp ].

; o cachorro tem que dormir
; o cachorro tem de dormir
que-de-compl-subj-raise-aux-with-pred := compl-subj-raise-aux-with-pred & [ ARG-ST.REST.FIRST.LOCAL.CAT.HEAD.COMP-FORM que+de_comp ].

; o artista insistiu em perseguir o cachorro
; TODO 06.10.21 "insistir" 'insist' is a subject control verb 
em-compl-subj-raise-aux-with-pred := compl-subj-raise-aux-with-pred & [ ARG-ST.REST.FIRST.LOCAL.CAT.HEAD.COMP-FORM em_comp ].

; redefinition of types generated by the grammar matrix
; TODO 05.10.21: use the types generated by the grammar matrix from choices file 178 

;comps1-complementizer-lex-item := complementizer-lex-item & basic-non-wh-word-lex &
;  [ SYNSEM.LOCAL [ CAT [ MC na-or--,
;			 HEAD.FORM finite,
;                         VAL.COMPS.FIRST.LOCAL.CAT [ MC -,
;                                                     HEAD.FORM finite ] ],
;                   CONT.HOOK.INDEX.SF prop ] ].

;comps8-complementizer-lex-item := complementizer-lex-item & basic-non-wh-word-lex &
;  [ SYNSEM.LOCAL [ CAT [ MC na-or--,
;			 HEAD.FORM finite,
;                         VAL.COMPS.FIRST.LOCAL [ CONT.HOOK.INDEX.E.MOOD indicative,
;                                                 CAT [ MC -,
;                                                       HEAD.FORM finite ] ] ],
;                   CONT.HOOK.INDEX.SF prop ] ].

; complementizers heading an infinitival complement of a subject raising verb (auxiliary) or an object control verb

; TODO: include SPR < > in VAL of of complement? See subj-raise-aux type.

a-que-complementizer-lex-item := complementizer-lex-item & basic-non-wh-word-lex &
  [ SYNSEM.LOCAL [ CAT [ MC na-or--,
                         VAL.COMPS.FIRST.LOCAL [ CAT [ MC -,
                                                       HEAD.FORM finite ],
                                                 CONT.HOOK.INDEX.E.MOOD subjunctive ],
                         HEAD.FORM a_que ],
                   CONT.HOOK.INDEX.SF prop ] ].
		   
complementizer-lex-item-1 := raise-sem-lex-item & non-local-none-lex-item & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ FORM #form, MOD < > ],
                       VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ HEAD verb & [FORM #form],
                           VAL [ SUBJ < unexpressed >,
                                 COMPS < > ] ] ] > ].

; inf-complementizer-lex-item := complementizer-lex-item-1 & [SYNSEM.LOCAL.CAT [ HEAD.FORM infinitive] & [VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM infl-or-not-infinitive]].

inf-complementizer-lex-item := complementizer-lex-item-1 & [SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM infl-or-not-infinitive].

a-inf-complementizer-lex-item := inf-complementizer-lex-item &  [SYNSEM.LOCAL.CAT.HEAD comp & [COMP-FORM a_comp]].

de-inf-complementizer-lex-item := inf-complementizer-lex-item &  [SYNSEM.LOCAL.CAT.HEAD comp & [COMP-FORM de_comp]].

em-inf-complementizer-lex-item := inf-complementizer-lex-item &  [SYNSEM.LOCAL.CAT.HEAD comp & [COMP-FORM em_comp]].

que-inf-complementizer-lex-item := inf-complementizer-lex-item &  [SYNSEM.LOCAL.CAT.HEAD comp & [COMP-FORM que_comp ]].

para-inf-complementizer-lex-item := inf-complementizer-lex-item &  [SYNSEM.LOCAL.CAT.HEAD comp & [COMP-FORM para_comp]].

; subject control verbs
; o gato prefere dormir
; o artista insistiu em perseguir o cachorro

trans-first-arg-control-verb-lex :=  main-verb-lex & noninh-refl-verb-lex & trans-first-arg-control-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comp >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE nom ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comp &
             [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] > ].

; subject control verb governing a bare infinitive
; o gato prefere dormir

inf-trans-first-arg-control-verb-lex := trans-first-arg-control-verb-lex & [ ARG-ST.REST.FIRST.LOCAL.CAT.HEAD.FORM infinitive].

;  subject control verb governing a facultatively inflected bare infinitive
;os artistas disseram ter ganho o festival
;os artistas disseram terem ganho o festival

fac-infl-inf-trans-first-arg-control-verb-lex := trans-first-arg-control-verb-lex & [ ARG-ST.REST.FIRST.LOCAL.CAT.HEAD.FORM infl-or-not-infinitive].

infl-inf-trans-first-arg-control-verb-lex := trans-first-arg-control-verb-lex & [ ARG-ST.REST.FIRST.LOCAL.CAT.HEAD.FORM infl_infinitive].

; subject control verbs governing an infinitival CP headed by a prepositional complementizer
; o artista insistiu em perseguir o cachorro
; TODO 15.10.21: create a more general supertype for trans-first-arg-control-verb-lex and comp-trans-first-arg-control-verb-lex
; with the common properties of both

comp-trans-first-arg-control-verb-lex :=  main-verb-lex & noninh-refl-verb-lex & trans-first-arg-control-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comp >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE nom ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comp &
             [ LOCAL.CAT.HEAD comp ] > ].


inf-comp-trans-first-arg-control-verb-lex := comp-trans-first-arg-control-verb-lex & [ARG-ST.REST.FIRST.LOCAL.CAT.HEAD.FORM infinitive].

; SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM infinitive
em-inf-comp-trans-first-arg-control-verb-lex := inf-comp-trans-first-arg-control-verb-lex &
[ARG-ST.REST.FIRST.LOCAL.CAT.HEAD.COMP-FORM em_comp].

de-inf-comp-trans-first-arg-control-verb-lex := inf-comp-trans-first-arg-control-verb-lex &
[ARG-ST.REST.FIRST.LOCAL.CAT.HEAD.COMP-FORM de_comp].


; ditransitives with subject control
; a estudante prometeu a o artista matar a ratazana

ditrans-first-arg-control-verb-lex :=  main-verb-lex & noninh-refl-verb-lex & ditrans-first-arg-control-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comp1, #comp2 >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE nom ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
		       #comp1 &
	      [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD adp & [ CASE dat ] ] ],	   
			  
             #comp2 &
             [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] > ].
              

inf-ditrans-first-arg-control-verb-lex := ditrans-first-arg-control-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.FORM infinitive].

; TODO 19.10.21: create common supertype for some of the folllowing types in order to simplify encoding of individual related types 
ditrans-second-arg-control-verb-lex :=  main-verb-lex & noninh-refl-verb-lex & cl-3rd-arg-ditrans-2nd-arg-control-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comp1, #comp2 >,
                             SUBJ < #subj > ] ],
    ARG-ST < #subj &
             [ LOCAL.CAT [ HEAD noun &
                                  [ CASE nom ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ] ],
	      #comp1 &
	      [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                             HEAD noun & [ CASE acc ] ] ],	   
			  
             #comp2 &
             [ LOCAL.CAT.HEAD comp ] > ].


; a Maria viu as amigas chorando
; embedded verb is a VP complement
nonpast-nonfin-ditrans-second-arg-control-verb-lex :=  main-verb-lex & noninh-refl-verb-lex & ;cl-3rd-arg-ditrans-2nd-arg-control-lex-item &
ditrans-second-arg-control-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comp1, #comp2 >,
                             SUBJ < #subj > ] ],
    ARG-ST < #subj &
             [ LOCAL.CAT [ HEAD noun &
                                  [ CASE nom ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ] ],
	      #comp1 &
	      [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                             HEAD noun & [ CASE acc ] ] ],	   
			  
             #comp2 &
             [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb & [FORM nonpast-nonfinite ] ] ] > ].
            


ditrans-second-arg-rec-control-verb-lex :=  main-verb-lex & noninh-refl-verb-lex & cl-3rd-arg-ditrans-2nd-arg-control-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comp1, #comp2 >,
                             SUBJ < #subj > ] ],
    ARG-ST < #subj &
             [ LOCAL.CAT [ HEAD noun &
                                  [ CASE nom ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ] ],
	      #comp1 &
	      [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                             HEAD adp & [ CASE rec ] ] ],	   
			  
             #comp2 &
             [ LOCAL.CAT.HEAD comp ] > ].
	     
; a mãe disse ao filho que dormisse
que-ditrans-second-arg-rec-control-verb-lex := ditrans-second-arg-rec-control-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.FORM que].

; eu autorizei os alunos a que escrevessem a carta
a-que-ditrans-second-arg-control-verb-lex := ditrans-second-arg-control-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.FORM a_que].

; eu autorizei os alunos a escreverem a carta
; eu autorizei os alunos a escrever a carta
inf-ditrans-second-arg-control-verb-lex := ditrans-second-arg-control-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.FORM infl-or-not-infinitive].

; a estudante obrigou o artista a matar a ratazana
a-inf-ditrans-second-arg-control-verb-lex := inf-ditrans-second-arg-control-verb-lex &  [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.COMP-FORM a_comp ].

; a estudante impediu o artista de matar a ratazana
de-inf-ditrans-second-arg-control-verb-lex := inf-ditrans-second-arg-control-verb-lex &  [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.COMP-FORM de_comp ].


; TODO 15.10.21: this specification seems redundant, because the COMP-FORM specification below seems to enforce verb form 
inf-ditrans-second-arg-rec-control-verb-lex := ditrans-second-arg-rec-control-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.FORM infl-or-not-infinitive].

; a estudante disse a o artista para trazer uma bola
para-inf-ditrans-second-arg-rec-control-verb-lex := inf-ditrans-second-arg-rec-control-verb-lex &  [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.COMP-FORM para_comp ].

;que-cl-verb-lex := fin-cl-verb-lex & clausal-nom-verb-lex & clausal-second-arg-trans-lex-item &
;  [ SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD comp ,
;                                                   WH.BOOL - ],
;                                             CONT.HOOK.INDEX.SF prop ] ] >,
;             NON-LOCAL.QUE.LIST < > ] ].

; TODO 05.10.21: use the types generated by the grammar matrix from choices file 178

;que-cl-verb-lex := fin-cl-verb-lex & clausal-nom-verb-lex & clausal-second-arg-trans-lex-item &
;  [ SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD comp &
;                                                        [ FORM finite ],
;                                                   WH.BOOL - ],
;                                             CONT.HOOK.INDEX.SF prop ] ] >,
;             NON-LOCAL.QUE.LIST < > ] ].

; This conflicts with the specifications of the verb types, where the CP complement form is the form of the complementizer
; fin-cl-verb-lex := noninh-refl-verb-lex & [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite].


inf-cl-rec-verb-lex  :=  noninh-refl-verb-lex & clausal-nom-rec-verb-lex & clausal-third-arg-ditrans-lex-item  & 
 [ SYNSEM [ LOCAL.CAT.VAL.COMPS.REST.FIRST [ LOCAL [ CAT [ HEAD verb &
                                                        [ FORM infl_infinitive ],
                                                   WH.BOOL - ],
                                             CONT.HOOK.INDEX.SF prop ] ] ,
             NON-LOCAL.QUE.LIST < > ] ].


;ditrans-second-arg-raising-verb-lex :=  main-verb-lex & noninh-refl-verb-lex & ditrans-second-arg-raising-lex-item &
;  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
;                             COMPS < #comp1, #comp2 >,
;                             SUBJ < #subj > ] ],
;    ARG-ST < #subj &
;             [ LOCAL.CAT [ HEAD noun &
;                                  [ CASE nom ],
;                             VAL [ SUBJ < >,
;                                   SPR < >,
;                                   SPEC < >,
;                                   COMPS < > ] ] ],
;	      #comp1 &
;	      [ LOCAL.CAT [ VAL [ SPR < >,
;                                 COMPS < > ],
;                             HEAD noun & [ CASE acc ] ] ],	   
;			  
;             #comp2 &
;             [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
;                                 COMPS < >,
;                                 SPR < >,
;                                 SPEC < > ],
;                           HEAD verb ] ] > ].



; TODO 23.11.21: create more mnemonic names for second argument control verbs governing a CP and a VP
; the present terminology is confusing
; verbs like "forçar alguém a fazer algo" and corresponding supertypes should be cl-ditrans...
;  verbs like "mandar alguém fazer algo" and corresponding supertypes should be ditrans...
; see solution adopted for object raising verbs (09.12.21)


; a professora mandou os alunos terminarem a tarefa
; a professora mandou os alunos terminar a tarefa

bare-inf-ditrans-second-arg-control-verb-lex := nonpast-nonfin-ditrans-second-arg-control-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.FORM infl-or-not-infinitive].

;comp-ditrans-second-arg-raising-verb-lex :=  main-verb-lex & noninh-refl-verb-lex & ditrans-second-arg-raising-lex-item &
;  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
;                             COMPS < #comp1, #comp2 >,
;                             SUBJ < #subj > ] ],
;    ARG-ST < #subj &
;             [ LOCAL.CAT [ HEAD noun &
;                                  [ CASE nom ],
;                             VAL [ SUBJ < >,
;                                   SPR < >,
;                                   SPEC < >,
;                                   COMPS < > ] ] ],
;	      #comp1 &
;	      [ LOCAL.CAT [ VAL [ SPR < >,
;                                 COMPS < > ],
;                             HEAD noun & [ CASE acc ] ] ],	   
;			  
;             #comp2 &
;             [ LOCAL.CAT.HEAD comp & [FORM infl-or-not-infinitive ] ] > ].


; a estudante impediu o artista de matar a ratazana


ditrans-second-arg-raising-verb-lex :=  main-verb-lex & noninh-refl-verb-lex & ditrans-second-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comp1, #comp2 >,
                             SUBJ < #subj > ] ],
    ARG-ST < #subj &
             [ LOCAL.CAT [ HEAD noun &
                                  [ CASE nom ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ] ],
	      #comp1 &
	      [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                             HEAD noun & [ CASE acc ] ] ],	   
			  
             #comp2 > ].


vp-third-arg-ditrans-second-arg-raising-verb-lex :=  ditrans-second-arg-raising-verb-lex &
  [ ARG-ST.REST.REST.FIRST [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] ].

clause-third-arg-ditrans-second-arg-raising-verb-lex :=  ditrans-second-arg-raising-verb-lex &
  [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD comp & [FORM infl-or-not-infinitive ]  ].

; a estudante fez o gato dormir
inf-ditrans-second-arg-raising-verb-lex := vp-third-arg-ditrans-second-arg-raising-verb-lex & [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.FORM infl-or-not-infinitive].

; a estudante impediu o gato dormir 
de-ditrans-second-arg-raising-verb-lex := clause-third-arg-ditrans-second-arg-raising-verb-lex &  [ ARG-ST.REST.REST.FIRST.LOCAL.CAT.HEAD.COMP-FORM de_comp ].

; TODO 21.12.21: create common supertype for this type or analogous types (see above)
a-que-cl-verb-lex := subj-cl-verb-lex & clausal-nom-verb-lex & clausal-second-arg-trans-lex-item &
  [ SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD comp &
                                                        [ FORM a_que ],
                                                   WH.BOOL - ],
                                             CONT.HOOK.INDEX.SF prop ] ] >,
             NON-LOCAL.QUE.LIST < > ] ].



; correcting a missing constraint from matrix. For 'cachorro amarelo'
; we don't want wh question reading.

; head-adj-phrase :+
;   [ SYNSEM.NON-LOCAL.QUE.LIST #que,
;     NH-DTR.SYNSEM.NON-LOCAL.QUE.LIST #que ].

basic-adjective-lex :+
   [ SYNSEM.NON-LOCAL.QUE.LIST < > ].
   