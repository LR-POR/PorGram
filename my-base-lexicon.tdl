;;; -*- Mode: TDL; Coding: utf-8 -*-
;;; Nouns

eu := pers-pron-1s-noun-lex &
  [ STEM < "eu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_eu_n_rel" ].

eles := pers-pron-3pm-noun-lex &
  [ STEM < "eles" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ele_n_1_rel" ].

artista := common-noun-lex &
  [ STEM < "artista" >,
    SYNSEM.LKEYS.KEYREL.PRED "_artista_n_rel" ].

dentista := common-noun-lex &
  [ STEM < "dentista" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dentista_n_rel" ].

estudante := common-noun-lex &
  [ STEM < "estudante" >,
    SYNSEM.LKEYS.KEYREL.PRED "_estudante_n_rel" ].

cliente := common-noun-lex &
  [ STEM < "cliente" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cliente_n_rel" ].

ratazana := fem-noun-lex &
  [ STEM < "ratazana" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ratazana_n_rel" ].

gato := masc-noun-lex &
  [ STEM < "gato" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gato_n_rel" ].

cachorro := masc-noun-lex &
  [ STEM < "cachorro" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cachorro_n_rel" ].

tabaco := masc-noun-lex &
  [ STEM < "tabaco" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tabaco_n_rel" ].

cachorrinho := dim-masc-noun-lex &
  [ STEM < "cachorrinho" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cachorro_n_rel" ].

lagartinha := dim-fem-noun-lex &
  [ STEM < "lagartinha" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lagarta_n_rel" ].

lagartona := aug-fem-noun-lex &
  [ STEM < "lagartona" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lagarta_n_rel" ].

lagartão := aug-masc-noun-lex &
  [ STEM < "lagartão" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lagarto_n_rel" ].

quem := inter-pron-hum-noun-lex &
  [ STEM < "quem" >,
    SYNSEM.LKEYS.KEYREL.PRED "_quem_n_rel" ].

o_20que := inter-pron-non-hum-noun-lex &
  [ STEM < "o",
           "que" >,
    SYNSEM.LKEYS.KEYREL.PRED "_o que_n_rel" ].

que_1 := inter-pron-non-hum-noun-lex &
  [ STEM < "que" >,
    SYNSEM.LKEYS.KEYREL.PRED "_que_n_rel" ].

tu := pers-pron-2s-noun-lex &
  [ STEM < "tu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tu_n_rel" ].

nós := pers-pron-1p-noun-lex &
  [ STEM < "nós" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nós_n_rel" ].

elas := pers-pron-3pf-noun-lex &
  [ STEM < "elas" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ele_n_2_rel" ].

ele := pers-pron-3sm-noun-lex &
  [ STEM < "ele" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ele_rel" ].

ela := pers-pron-3sf-noun-lex &
  [ STEM < "ela" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ele_n_rel" ].

lagartãozinho := dim-aug-masc-noun-lex &
  [ STEM < "lagartãozinho" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lagarto_n_rel" ].

lagartonazinha := dim-aug-fem-noun-lex &
  [ STEM < "lagartonazinha" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lagarto_n_rel" ].

;;; Adjectives

;;simples := infl-form-adj-lex &
;;  [ STEM < "simples" >,
;;    SYNSEM.LKEYS.KEYREL.PRED "_simples_a_rel" ].

criativo := non-uniform-adj-lex &
		    [ STEM < "criativo" >,
		    SYNSEM.LKEYS.KEYREL.PRED "_criativo_a_rel" ].

;;; Verbs

latiu := intrans-3sg-verb-lex &
  [ STEM < "latiu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_latir_v_1_rel" ].

chegou := intrans-3sg-verb-lex &
  [ STEM < "chegou" >,
    SYNSEM.LKEYS.KEYREL.PRED "_chegar_v_rel" ].

perseguiu := trans-3sg-verb-lex &
  [ STEM < "perseguiu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_perseguir_v_1_rel" ].

latido := intrans-past-part-verb-lex &
  [ STEM < "latido" >,
    SYNSEM.LKEYS.KEYREL.PRED "_latir_v_2_rel" ].

perseguido := trans-past-part-verb-lex &
  [ STEM < "perseguido" >,
    SYNSEM.LKEYS.KEYREL.PRED "_perseguir_v_2_rel" ].

latindo := intrans-pres-part-verb-lex &
  [ STEM < "latindo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_latir_v_3_rel" ].

perseguindo := trans-pres-part-verb-lex &
  [ STEM < "perseguindo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_perseguir_v_3_rel" ].

latir := intrans-inf-verb-lex &
  [ STEM < "latir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_latir_v_4_rel" ].

perseguir := trans-inf-verb-lex &
  [ STEM < "perseguir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_perseguir_v_4_rel" ].

quer := volitive-3sg-verb-lex &
  [ STEM < "quer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_quer_v_rel" ].

acredita := cognitive-3sg-verb-lex &
  [ STEM < "acredita" >,
    SYNSEM.LKEYS.KEYREL.PRED "_acredita_v_rel" ].

late := intrans-3sg-ind-verb-lex &
  [ STEM < "late" >,
    SYNSEM.LKEYS.KEYREL.PRED "_latir_v_5_rel" ].

lata := intrans-3sg-subj-verb-lex &
  [ STEM < "lata" >,
    SYNSEM.LKEYS.KEYREL.PRED "_latir_v_6_rel" ].

perguntar_1 := question-verb-lex &
  [ STEM < "perguntar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_perguntar_v_rel" ].

perguntar_2 := question-refl-verb-lex &
  [ STEM < "perguntar" >,
    SYNSEM.LKEYS.KEYREL.PRED "se_perguntar_v_rel" ].

matar := reg-trans-verb-lex &
  [ STEM < "matar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_matar_v_rel" ].

amar := reg-trans-verb-lex &
  [ STEM < "amar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_amar_v_rel" ].

admirar := reg-trans-verb-lex &
  [ STEM < "admirar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_admirar_v_rel" ].

imitar := reg-trans-verb-lex &
  [ STEM < "imitar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_imitar_v_rel" ].

adorar := reg-trans-verb-lex &
  [ STEM < "adorar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_adorar_v_rel" ].

vender := reg-trans-verb-lex &
  [ STEM < "vender" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vender_v_rel" ].

declarar := dicendi-verb-lex &
  [ STEM < "declarar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_declarar_v_rel" ].

afirmar := dicendi-verb-lex &
  [ STEM < "afirmar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_afirmar_v_rel" ].

queixar := intrans-refl-verb-lex &
  [ STEM < "queixar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_queixar-se_v_rel" ].

lamentar := evaluative-verb-lex &
  [ STEM < "lamentar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lamentar_v_rel" ].

ladrar := reg-intrans-verb-lex &
  [ STEM < "ladrar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ladrar_v_rel" ].

sorrir := reg-intrans-verb-lex &
  [ STEM < "sorrir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sorrir_v_rel" ].

;;; Auxiliaries

tem := ter-3sg-aux-lex &
  [ STEM < "tem" > ].

está := estar-3sg-aux-lex &
  [ STEM < "está" > ].

estado := estar-past-part-aux-lex &
  [ STEM < "estado" > ].

vai := ir-3sg-aux-lex &
  [ STEM < "vai" > ].

vão := ir-3pl-aux-lex &
  [ STEM < "vão" > ].

;;; Copulas

é := ser-3sg-cop-lex &
  [ STEM < "é" > ].

são := ser-3pl-cop-lex &
  [ STEM < "são" > ].

;;; Determiners

o := def-art-msg-determiner-lex &
  [ STEM < "o" >,
    SYNSEM.LKEYS.KEYREL.PRED "_o_q_rel" ].

os := def-art-mpl-determiner-lex &
  [ STEM < "os" >,
    SYNSEM.LKEYS.KEYREL.PRED "_os_q_1_rel" ].

qual := qual-sg-determiner-lex &
  [ STEM < "qual" >,
    SYNSEM.LKEYS.KEYREL.PRED "_qual_q_rel" ].

quais := qual-pl-determiner-lex &
  [ STEM < "quais" >,
    SYNSEM.LKEYS.KEYREL.PRED "_qual_q_rel" ].

que_2 := que-determiner-lex &
  [ STEM < "que" >,
    SYNSEM.LKEYS.KEYREL.PRED "_que_q_rel" ].

a := def-art-fsg-determiner-lex &
  [ STEM < "a" >,
    SYNSEM.LKEYS.KEYREL.PRED "_a_q_rel" ].

as := def-art-fpl-determiner-lex &
  [ STEM < "as" >,
    SYNSEM.LKEYS.KEYREL.PRED "_as_q_rel" ].

;;; Adverbs

será_20que := q-particle1-lex &
  [ STEM < "será",
           "que" > ].

;;; Complementizers

que_3 := comps1-complementizer-lex-item &
  [ STEM < "que" > ].

se := comps3-complementizer-lex-item &
  [ STEM < "se" > ].
