;;; -*- Mode: TDL; Coding: utf-8 -*-
;;; Nouns

eu := pers-pron-1s-noun-lex &
  [ STEM < "eu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_eu_n_rel" ].

eles := pers-pron-3pm-noun-lex &
  [ STEM < "eles" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ele_n_1_rel" ].

artista := common-noun-lex &
  [ STEM < "artista" >,
    SYNSEM.LKEYS.KEYREL.PRED "_artista_n_rel" ].

dentista := common-noun-lex &
  [ STEM < "dentista" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dentista_n_rel" ].

estudante := common-noun-lex &
  [ STEM < "estudante" >,
    SYNSEM.LKEYS.KEYREL.PRED "_estudante_n_rel" ].

cliente := common-noun-lex &
  [ STEM < "cliente" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cliente_n_rel" ].

ratazana := fem-noun-lex &
  [ STEM < "ratazana" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ratazana_n_rel" ].

porta := fem-noun-lex &
  [ STEM < "porta" >,
    SYNSEM.LKEYS.KEYREL.PRED "_porta_n_rel" ].

bicicleta := fem-noun-lex &
  [ STEM < "bicicleta" >,
    SYNSEM.LKEYS.KEYREL.PRED "_bicicleta_n_rel" ].

cidade := fem-noun-lex &
  [ STEM < "cidade" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cidade_n_rel" ].

gato := masc-noun-lex &
  [ STEM < "gato" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gato_n_rel" ].

cachorro := masc-noun-lex &
  [ STEM < "cachorro" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cachorro_n_rel" ].

tabaco := masc-noun-lex &
  [ STEM < "tabaco" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tabaco_n_rel" ].

jardim := masc-noun-lex &
  [ STEM < "jardim" >,
    SYNSEM.LKEYS.KEYREL.PRED "_jardim_n_rel" ].

dia := masc-noun-lex &
  [ STEM < "dia" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dia_n_rel" ].

minuto := masc-noun-lex &
  [ STEM < "minuto" >,
    SYNSEM.LKEYS.KEYREL.PRED "_minuto_n_rel" ].

junho := masc-noun-lex &
  [ STEM < "junho" >,
    SYNSEM.LKEYS.KEYREL.PRED "_junho_n_rel" ].

cão := masc-noun-lex &
  [ STEM < "cão" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cão_n_rel" ].

cachorrinho := dim-masc-noun-lex &
  [ STEM < "cachorrinho" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cachorro_n_rel" ].

lagartinha := dim-fem-noun-lex &
  [ STEM < "lagartinha" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lagarta_n_rel" ].

lagartona := aug-fem-noun-lex &
  [ STEM < "lagartona" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lagarta_n_rel" ].

lagartão := aug-masc-noun-lex &
  [ STEM < "lagartão" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lagarto_n_rel" ].

quem := inter-pron-hum-noun-lex &
  [ STEM < "quem" >,
    SYNSEM.LKEYS.KEYREL.PRED "_quem_n_rel" ].

o_20que := inter-pron-non-hum-noun-lex &
  [ STEM < "o",
           "que" >,
    SYNSEM.LKEYS.KEYREL.PRED "_o que_n_rel" ].

que_1 := inter-pron-non-hum-noun-lex &
  [ STEM < "que" >,
    SYNSEM.LKEYS.KEYREL.PRED "_que_n_rel" ].

tu := pers-pron-2s-noun-lex &
  [ STEM < "tu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tu_n_rel" ].

nós := pers-pron-1p-noun-lex &
  [ STEM < "nós" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nós_n_rel" ].

elas := pers-pron-3pf-noun-lex &
  [ STEM < "elas" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ele_n_2_rel" ].

ele := pers-pron-3sm-noun-lex &
  [ STEM < "ele" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ele_rel" ].

ela := pers-pron-3sf-noun-lex &
  [ STEM < "ela" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ele_n_rel" ].

lagartãozinho := dim-aug-masc-noun-lex &
  [ STEM < "lagartãozinho" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lagarto_n_rel" ].

lagartonazinha := dim-aug-fem-noun-lex &
  [ STEM < "lagartonazinha" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lagarto_n_rel" ].

vós := pers-pron-2pl-noun-lex &
  [ STEM < "vós" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vós_n_rel" ].

;;; Adjectives

simples := infl-form-adj-lex &
  [ STEM < "simples" >,
    SYNSEM.LKEYS.KEYREL.PRED "_simples_a_rel" ].

amarelinho := non-unif-dim-adj-lex &
  [ STEM < "amarelinho" >,
    SYNSEM.LKEYS.KEYREL.PRED "_amarelo_a_2_rel" ].

amarelão := aug-adj-lex &
  [ STEM < "amarelão" >,
    SYNSEM.LKEYS.KEYREL.PRED "_amarelo_a_3_rel" ].

amarelíssimo := abs-adj-lex &
  [ STEM < "amarelíssimo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_amarelo_a_4_rel" ].

inteligente := uniform-adj-lex &
  [ STEM < "inteligente" >,
    SYNSEM.LKEYS.KEYREL.PRED "_inteligente_a_rel" ].

persa := uniform-adj-lex &
  [ STEM < "persa" >,
    SYNSEM.LKEYS.KEYREL.PRED "_persa_a_rel" ].

fiel := uniform-adj-lex &
  [ STEM < "fiel" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fiel_a_rel" ].

exemplar := uniform-adj-lex &
  [ STEM < "exemplar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_exemplar_a_rel" ].

feroz := uniform-adj-lex &
  [ STEM < "feroz" >,
    SYNSEM.LKEYS.KEYREL.PRED "_feroz_a_rel" ].

comum := uniform-adj-lex &
  [ STEM < "comum" >,
    SYNSEM.LKEYS.KEYREL.PRED "_comum_a_rel" ].

feliz := uniform-adj-lex &
  [ STEM < "feliz" >,
    SYNSEM.LKEYS.KEYREL.PRED "_feliz_a_rel" ].

triste := uniform-adj-lex &
  [ STEM < "triste" >,
    SYNSEM.LKEYS.KEYREL.PRED "_triste_a_rel" ].

vermelho := non-uniform-adj-lex &
  [ STEM < "vermelho" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vermelho_a_rel" ].

amarelo := non-uniform-adj-lex &
  [ STEM < "amarelo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_amarelo_a_rel" ].

pequeno := non-uniform-adj-lex &
  [ STEM < "pequeno" >,
    SYNSEM.LKEYS.KEYREL.PRED "_pequeno_a_rel" ].

cru := non-uniform-adj-lex &
  [ STEM < "cru" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cru_a_rel" ].

inglês := non-uniform-adj-lex &
  [ STEM < "inglês" >,
    SYNSEM.LKEYS.KEYREL.PRED "_inglês_a_rel" ].

encantador := non-uniform-adj-lex &
  [ STEM < "encantador" >,
    SYNSEM.LKEYS.KEYREL.PRED "_encantador_a_rel" ].

hebreu := non-uniform-adj-lex &
  [ STEM < "hebreu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_hebreu_a_rel" ].

beirão := non-uniform-adj-lex &
  [ STEM < "beirão" >,
    SYNSEM.LKEYS.KEYREL.PRED "_beirão_a_rel" ].

judeu := non-uniform-adj-lex &
  [ STEM < "judeu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_judeu_a_rel" ].

ilhéu := non-uniform-adj-lex &
  [ STEM < "ilhéu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ilhéu_a_rel" ].

nu := non-uniform-adj-lex &
  [ STEM < "nu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nu_a_rel" ].

europeu := non-uniform-adj-lex &
  [ STEM < "europeu" >,
    SYNSEM.LKEYS.KEYREL.PRED "_europeu_a_rel" ].

francês := non-uniform-adj-lex &
  [ STEM < "francês" >,
    SYNSEM.LKEYS.KEYREL.PRED "_francês_a_rel" ].

amarelãozinho := dim-aug-adj-lex &
  [ STEM < "amarelãozinho" >,
    SYNSEM.LKEYS.KEYREL.PRED "_amarelo_a_6_rel" ].

;;; Case-marking adpositions

dat-marker_a := case-marking-adp-lex &
  [ STEM < "a" >,
    SYNSEM.LOCAL [ CONT [ HOOK [ ICONS-KEY.IARG1 #clause,
                                 CLAUSE-KEY #clause ],
                          ICONS.LIST < > ],
                   CAT.HEAD.CASE dat ] ].

para := normadp1-norm-adposition-lex &
  [ STEM < "para" >,
    SYNSEM.LKEYS.KEYREL.PRED "_para_p_rel" ].

em := normadp2-norm-adposition-lex &
  [ STEM < "em" >,
    SYNSEM.LKEYS.KEYREL.PRED "_em_p_rel" ].

;;; Verbs

querer_1 := vol-verb-lex &
  [ STEM < "querer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_querer_v_1_rel" ].

desejar_1 := vol-verb-lex &
  [ STEM < "desejar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_desejar_v_1_rel" ].

esperar := vol-verb-lex &
  [ STEM < "esperar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_esperar_v_rel" ].

preferir := vol-verb-lex &
  [ STEM < "preferir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_preferir_v_rel" ].

pretender := vol-verb-lex &
  [ STEM < "pretender" >,
    SYNSEM.LKEYS.KEYREL.PRED "_pretender_v_rel" ].

recear := vol-verb-lex &
  [ STEM < "recear" >,
    SYNSEM.LKEYS.KEYREL.PRED "_recear_v_rel" ].

recusar := vol-verb-lex &
  [ STEM < "recusar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_recusar_v_rel" ].

temer_1 := vol-verb-lex &
  [ STEM < "temer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_temer_v_1_rel" ].

perguntar_1 := quest-verb-lex &
  [ STEM < "perguntar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_perguntar_v_rel" ].

perguntar_2 := refl-quest-verb-lex &
  [ STEM < "perguntar" >,
    SYNSEM.LKEYS.KEYREL.PRED "se_perguntar_v_rel" ].

matar := trans-verb-lex &
  [ STEM < "matar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_matar_v_rel" ].

amar := trans-verb-lex &
  [ STEM < "amar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_amar_v_rel" ].

admirar := trans-verb-lex &
  [ STEM < "admirar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_admirar_v_rel" ].

imitar := trans-verb-lex &
  [ STEM < "imitar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_imitar_v_rel" ].

adorar := trans-verb-lex &
  [ STEM < "adorar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_adorar_v_rel" ].

vender := trans-verb-lex &
  [ STEM < "vender" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vender_v_rel" ].

perseguir := trans-verb-lex &
  [ STEM < "perseguir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_perseguir_v_2_rel" ].

temer_2 := trans-verb-lex &
  [ STEM < "temer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_temer_v_2_rel" ].

socorrer := trans-verb-lex &
  [ STEM < "socorrer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_socorrer_v_rel" ].

doar := trans-verb-lex &
  [ STEM < "doar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_doar_v_rel" ].

acreditar_1 := mental-act-verb-lex &
  [ STEM < "acreditar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_acreditar_v_1_rel" ].

aceitar := mental-act-verb-lex &
  [ STEM < "aceitar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_aceitar_v_rel" ].

achar := mental-act-verb-lex &
  [ STEM < "achar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_achar_v_rel" ].

admitir_1 := mental-act-verb-lex &
  [ STEM < "admitir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_admitir_v_1_rel" ].

calcular := mental-act-verb-lex &
  [ STEM < "calcular" >,
    SYNSEM.LKEYS.KEYREL.PRED "_calcular_v_rel" ].

compreender := mental-act-verb-lex &
  [ STEM < "compreender" >,
    SYNSEM.LKEYS.KEYREL.PRED "_compreender_v_rel" ].

considerar := mental-act-verb-lex &
  [ STEM < "considerar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_considerar_v_rel" ].

certificar := mental-act-verb-lex &
  [ STEM < "certificar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_certificar_v_rel" ].

crer := mental-act-verb-lex &
  [ STEM < "crer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_crer_v_rel" ].

descobrir := mental-act-verb-lex &
  [ STEM < "descobrir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_descobrir_v_rel" ].

duvidar := mental-act-verb-lex &
  [ STEM < "duvidar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_duvidar_v_rel" ].

entender := mental-act-verb-lex &
  [ STEM < "entender" >,
    SYNSEM.LKEYS.KEYREL.PRED "_entender_v_rel" ].

fingir := mental-act-verb-lex &
  [ STEM < "fingir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fingir_v_rel" ].

ignorar := mental-act-verb-lex &
  [ STEM < "ignorar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ignorar_v_rel" ].

imaginar := mental-act-verb-lex &
  [ STEM < "imaginar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_imaginar_v_rel" ].

pensar := mental-act-verb-lex &
  [ STEM < "pensar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_pensar_v_rel" ].

prever := mental-act-verb-lex &
  [ STEM < "prever" >,
    SYNSEM.LKEYS.KEYREL.PRED "_prever_v_rel" ].

reconhecer := mental-act-verb-lex &
  [ STEM < "reconhecer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_reconhecer_v_rel" ].

supor := mental-act-verb-lex &
  [ STEM < "supor" >,
    SYNSEM.LKEYS.KEYREL.PRED "_supor_v_rel" ].

declarar := declar-verb-lex &
  [ STEM < "declarar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_declarar_v_rel" ].

afirmar := declar-verb-lex &
  [ STEM < "afirmar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_afirmar_v_rel" ].

acrescentar := declar-verb-lex &
  [ STEM < "acrescentar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_acrescentar_v_rel" ].

alegar := declar-verb-lex &
  [ STEM < "alegar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_alegar_v_rel" ].

assegurar := declar-verb-lex &
  [ STEM < "assegurar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_assegurar_v_rel" ].

observar := declar-verb-lex &
  [ STEM < "observar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_observar_v_rel" ].

concluir := declar-verb-lex &
  [ STEM < "concluir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_concluir_v_rel" ].

concordar := declar-verb-lex &
  [ STEM < "concordar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_concordar_v_rel" ].

confessar := declar-verb-lex &
  [ STEM < "confessar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_confessar_v_rel" ].

criticar_1 := declar-verb-lex &
  [ STEM < "criticar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_criticar_v_1_rel" ].

decidir := declar-verb-lex &
  [ STEM < "decidir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_decidir_v_rel" ].

desculpar_1 := declar-verb-lex &
  [ STEM < "desculpar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_desculpar_v_1_rel" ].

dizer_1 := declar-verb-lex &
  [ STEM < "dizer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dizer_v_1_rel" ].

insinuar := declar-verb-lex &
  [ STEM < "insinuar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_insinuar_v_rel" ].

insistir_1 := declar-verb-lex &
  [ STEM < "insistir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_insistir_v_1_rel" ].

jurar := declar-verb-lex &
  [ STEM < "jurar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_jurar_v_rel" ].

pregar := declar-verb-lex &
  [ STEM < "pregar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_pregar_v_rel" ].

proclamar := declar-verb-lex &
  [ STEM < "proclamar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_proclamar_v_rel" ].

prometer := declar-verb-lex &
  [ STEM < "prometer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_prometer_v_rel" ].

sugerir := declar-verb-lex &
  [ STEM < "sugerir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sugerir_v_rel" ].

queixar := refl-int-verb-lex &
  [ STEM < "queixar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_queixar-se_v_rel" ].

lamentar_1 := inf-eval-verb-lex &
  [ STEM < "lamentar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lamentar_v_1_rel" ].

detestar_1 := inf-eval-verb-lex &
  [ STEM < "detestar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_detestar_v_1_rel" ].

ladrar := nonrefl-int-verb-lex &
  [ STEM < "ladrar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ladrar_v_2_rel" ].

sorrir := nonrefl-int-verb-lex &
  [ STEM < "sorrir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sorrir_v_rel" ].

latir := nonrefl-int-verb-lex &
  [ STEM < "latir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_latir_v_rel" ].

chegar := nonrefl-int-verb-lex &
  [ STEM < "chegar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_chegar_v_rel" ].

correr := nonrefl-int-verb-lex &
  [ STEM < "correr" >,
    SYNSEM.LKEYS.KEYREL.PRED "_correr_v_rel" ].

gemer := nonrefl-int-verb-lex &
  [ STEM < "gemer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gemer_v_rel" ].

adoecer := nonrefl-int-verb-lex &
  [ STEM < "adoecer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_adoecer_v_rel" ].

caminhar := nonrefl-int-verb-lex &
  [ STEM < "caminhar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_caminhar_v_rel" ].

abrir := fac-refl-int-verb-lex &
  [ STEM < "abrir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_abrir_v_rel" ].

detestar_2 := que-eval-verb-lex &
  [ STEM < "detestar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_detestar_v_2_rel" ].

lamentar_2 := que-eval-verb-lex &
  [ STEM < "lamentar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lamentar_v_2_rel" ].

criticar_2 := que-eval-verb-lex &
  [ STEM < "criticar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_criticar_v_2_rel" ].

deplorar := que-eval-verb-lex &
  [ STEM < "deplorar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_deplorar_v_rel" ].

desculpar_2 := que-eval-verb-lex &
  [ STEM < "desculpar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_desculpar_v_2_rel" ].

detestar_3 := que-eval-verb-lex &
  [ STEM < "detestar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_detestar_v_3_rel" ].

gostar := que-eval-verb-lex &
  [ STEM < "gostar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_gostar_v_rel" ].

reprovar := que-eval-verb-lex &
  [ STEM < "reprovar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_reprovar_v_2_rel" ].

suportar := que-eval-verb-lex &
  [ STEM < "suportar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_suportar_v_rel" ].

tolerar := que-eval-verb-lex &
  [ STEM < "tolerar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tolerar_v_rel" ].

odiar := que-eval-verb-lex &
  [ STEM < "odiar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_odiar_v_rel" ].

aprovar := que-eval-verb-lex &
  [ STEM < "aprovar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_aprovar_v_2_rel" ].

desaprovar := que-eval-verb-lex &
  [ STEM < "desaprovar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_desaprovar_v_2_rel" ].

insistir_2 := que-subj-cl-verb-lex &
  [ STEM < "insistir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_insistir_v_2_rel" ].

evitar := que-subj-cl-verb-lex &
  [ STEM < "evitar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_evitar_v_rel" ].

fazer_1 := com-que-caus-verb-lex &
  [ STEM < "fazer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fazer_v_1_rel" ].

fazer_2 := que-caus-verb-lex &
  [ STEM < "fazer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fazer_v_2_rel" ].

mandar_1 := que-caus-verb-lex &
  [ STEM < "mandar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mandar_v_1_rel" ].

deixar_1 := que-caus-verb-lex &
  [ STEM < "deixar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_deixar_v_1_rel" ].

ouvir_1 := que-percep-verb-lex &
  [ STEM < "ouvir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ouvir_v_1_rel" ].

sentir_1 := que-percep-verb-lex &
  [ STEM < "sentir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sentir_v_1_rel" ].

ver_1 := que-percep-verb-lex &
  [ STEM < "ver" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ver_v_1_rel" ].

perceber := que-percep-verb-lex &
  [ STEM < "perceber" >,
    SYNSEM.LKEYS.KEYREL.PRED "_perceber_v_rel" ].

saber_1 := fact-mental-act-verb-lex &
  [ STEM < "saber" >,
    SYNSEM.LKEYS.KEYREL.PRED "_saber_v_1_rel" ].

fazer_3 := inf-caus-verb-lex &
  [ STEM < "fazer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_fazer_v_3_rel" ].

mandar_2 := inf-caus-verb-lex &
  [ STEM < "mandar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_mandar_v_2_rel" ].

deixar_2 := inf-caus-verb-lex &
  [ STEM < "deixar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_deixar_v_2_rel" ].

ouvir_2 := inf-percep-verb-lex &
  [ STEM < "ouvir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ouvir_v_2_rel" ].

ver_2 := inf-percep-verb-lex &
  [ STEM < "ver" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ver_v_2_rel" ].

sentir_2 := inf-percep-verb-lex &
  [ STEM < "sentir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_sentir_v_2_rel" ].

pedir := para-que-cl-verb-lex &
  [ STEM < "pedir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_pedir_v_rel" ].

insistir_3 := em-que-cl-verb-lex &
  [ STEM < "insistir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_insistir_v_3_rel" ].

obedecer := dat-obj-verb-lex &
  [ STEM < "obedecer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_obedecer_v_rel" ].

dizer_2 := dir-verb-lex &
  [ STEM < "dizer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dizer_v_2_rel" ].

admitir_2 := dir-verb-lex &
  [ STEM < "admitir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_admitir_v_2_rel" ].

consentir := dir-verb-lex &
  [ STEM < "consentir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_consentir_v_rel" ].

exigir := dir-verb-lex &
  [ STEM < "exigir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_exigir_v_rel" ].

ordenar := dir-verb-lex &
  [ STEM < "ordenar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ordenar_v_rel" ].

permitir := dir-verb-lex &
  [ STEM < "permitir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_permitir_v_rel" ].

autorizar := dir-verb-lex &
  [ STEM < "autorizar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_autorizar_v_rel" ].

aconselhar := dir-verb-lex &
  [ STEM < "aconselhar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_aconselhar_v_rel" ].

obrigar := dir-verb-lex &
  [ STEM < "obrigar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_obrigar_v_rel" ].

determinar := dir-verb-lex &
  [ STEM < "determinar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_determinar_v_rel" ].

proibir := dir-verb-lex &
  [ STEM < "proibir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_proibir_v_rel" ].

impedir := dir-verb-lex &
  [ STEM < "impedir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_impedir_v_rel" ].

;;; Auxiliaries

ter := ter-aux-lex &
  [ STEM < "ter" > ].

haver := ter-aux-lex &
  [ STEM < "haver" > ].

estar_1 := estar-aux-lex &
  [ STEM < "estar" > ].

ir_1 := ir-aux-lex &
  [ STEM < "ir" > ].

poder := bare-inf-aux-lex &
  [ STEM < "poder" >,
    SYNSEM.LKEYS.KEYREL.PRED "_poder_v_rel" ].

dever := bare-inf-aux-lex &
  [ STEM < "dever" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dever_v_rel" ].

ousar := bare-inf-aux-lex &
  [ STEM < "ousar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ousar_v_2_rel" ].

parecer := bare-inf-aux-lex &
  [ STEM < "parecer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_parecer_v_rel" ].

desejar_2 := bare-inf-aux-lex &
  [ STEM < "desejar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_desejar_v_2_rel" ].

querer_2 := bare-inf-aux-lex &
  [ STEM < "querer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_querer_v_2_rel" ].

saber_2 := bare-inf-aux-lex &
  [ STEM < "saber" >,
    SYNSEM.LKEYS.KEYREL.PRED "_saber_v_2_rel" ].

detestar_4 := bare-inf-aux-lex &
  [ STEM < "detestar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_detestar_v_4_rel" ].

lamentar_3 := bare-inf-aux-lex &
  [ STEM < "lamentar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_lamentar_v_3_rel" ].

conseguir := bare-inf-aux-lex &
  [ STEM < "conseguir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_conseguir_v_rel" ].

tentar_1 := bare-inf-aux-lex &
  [ STEM < "tentar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tentar_v_1_rel" ].

dizer_3 := bare-inf-aux-lex &
  [ STEM < "dizer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dizer_v_3_rel" ].

acreditar_2 := bare-inf-aux-lex &
  [ STEM < "acreditar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_acreditar_v_2_rel" ].

tentar_2 := bare-inf-aux-lex &
  [ STEM < "tentar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tentar_v_2_rel" ].

tencionar := bare-inf-aux-lex &
  [ STEM < "tencionar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tencionar_v_rel" ].

continuar := ger-aux-lex &
  [ STEM < "continuar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_continuar_v_rel" ].

andar := ger-aux-lex &
  [ STEM < "andar" >,
    SYNSEM.LKEYS.KEYREL.PRED "_andar_v_rel" ].

ir_2 := ger-aux-lex &
  [ STEM < "ir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ir_v_rel" ].

vir := ger-aux-lex &
  [ STEM < "vir" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vir_v_rel" ].

viver := ger-aux-lex &
  [ STEM < "viver" >,
    SYNSEM.LKEYS.KEYREL.PRED "_viver_v_rel" ].

;;; Copulas

ser := ser-cop-lex &
  [ STEM < "ser" > ].

estar_2 := estar-cop-lex &
  [ STEM < "estar" > ].

;;; Determiners

o := def-art-determiner-lex &
  [ STEM < "o" >,
    SYNSEM.LKEYS.KEYREL.PRED "_o_q_rel" ].

qual := qual-determiner-lex &
  [ STEM < "qual" >,
    SYNSEM.LKEYS.KEYREL.PRED "_qual_q_rel" ].

que_2 := que-determiner-lex &
  [ STEM < "que" >,
    SYNSEM.LKEYS.KEYREL.PRED "_que_q_rel" ].

cada := cada-determiner-lex &
  [ STEM < "cada" >,
    SYNSEM.LKEYS.KEYREL.PRED "_cada_q_rel" ].

todo := todo-determiner-lex &
  [ STEM < "todo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_todo_q_1_rel" ].

um := indef-art-determiner-lex &
  [ STEM < "um" >,
    SYNSEM.LKEYS.KEYREL.PRED "_um_q_rel" ].

algum := algum-determiner-lex &
  [ STEM < "algum" >,
    SYNSEM.LKEYS.KEYREL.PRED "_algum_q_rel" ].

este := dem-prox-determiner-lex &
  [ STEM < "este" >,
    SYNSEM.LKEYS.KEYREL.PRED "_este_q_rel" ].

esse := dem-med-determiner-lex &
  [ STEM < "esse" >,
    SYNSEM.LKEYS.KEYREL.PRED "_esse_q_rel" ].

aquele := dem-dist-determiner-lex &
  [ STEM < "aquele" >,
    SYNSEM.LKEYS.KEYREL.PRED "_aquele_q_rel" ].

outro := outro-determiner-lex &
  [ STEM < "outro" >,
    SYNSEM.LKEYS.KEYREL.PRED "_outro_q_rel" ].

pouco := pouco-determiner-lex &
  [ STEM < "pouco" >,
    SYNSEM.LKEYS.KEYREL.PRED "_pouco_q_rel" ].

dois := card-2-determiner-lex &
  [ STEM < "dois" >,
    SYNSEM.LKEYS.KEYREL.PRED "_dois_q_rel" ].

três := card-3-determiner-lex &
  [ STEM < "três" >,
    SYNSEM.LKEYS.KEYREL.PRED "_três_q_rel" ].

quanto := quanto-determiner-lex &
  [ STEM < "quanto" >,
    SYNSEM.LKEYS.KEYREL.PRED "_quanto_q_rel" ].

qualquer := qualquer-determiner-lex &
  [ STEM < "qualquer" >,
    SYNSEM.LKEYS.KEYREL.PRED "_qualquer_q_rel" ].

certo := certo-determiner-lex &
  [ STEM < "certo" >,
    SYNSEM.LKEYS.KEYREL.PRED "_certo_q_rel" ].

muito := muito-determiner-lex &
  [ STEM < "muito" >,
    SYNSEM.LKEYS.KEYREL.PRED "_muito_q_rel" ].

ambos := ambos-determiner-lex &
  [ STEM < "ambos" >,
    SYNSEM.LKEYS.KEYREL.PRED "_ambos_q_rel" ].

tal := tal-determiner-lex &
  [ STEM < "tal" >,
    SYNSEM.LKEYS.KEYREL.PRED "_tal_q_rel" ].

vários := vários-determiner-lex &
  [ STEM < "vários" >,
    SYNSEM.LKEYS.KEYREL.PRED "_vários_q_rel" ].

nenhum := nenhum-determiner-lex &
  [ STEM < "nenhum" >,
    SYNSEM.LKEYS.KEYREL.PRED "_nenhum_q_rel" ].

diversos := diversos-determiner-lex &
  [ STEM < "diversos" >,
    SYNSEM.LKEYS.KEYREL.PRED "_diversos_q_rel" ].

;;; Adverbs

será_20que := q-particle1-lex &
  [ STEM < "será",
           "que" > ].

;;; Complementizers

que_3 := comps1-complementizer-lex-item &
  [ STEM < "que" > ].

se := comps3-complementizer-lex-item &
  [ STEM < "se" > ].

com_20que := comps5-complementizer-lex-item &
  [ STEM < "com",
           "que" > ].

para_20que := comps6-complementizer-lex-item &
  [ STEM < "para",
           "que" > ].

em_20que := comps7-complementizer-lex-item &
  [ STEM < "em",
           "que" > ].

que_4 := comps8-complementizer-lex-item &
  [ STEM < "que" > ].

que_5 := comps9-complementizer-lex-item &
  [ STEM < "que" > ].
